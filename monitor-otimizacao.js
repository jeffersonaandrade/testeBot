const { cacheManager, messageOptimizer, messageGrouper } = require('./utils');
const config = require('./config');

// Fun√ß√£o para mostrar estat√≠sticas de cache
function mostrarCache() {
  console.log("üì¶ ESTAT√çSTICAS DO CACHE\n");
  
  const estatisticas = cacheManager.getEstatisticas();
  
  console.log(`üìä Tamanho atual: ${estatisticas.tamanho}/${estatisticas.tamanhoMaximo}`);
  console.log(`üìà Taxa de uso: ${estatisticas.taxaUso}%`);
  console.log(`‚è∞ Tempo de expira√ß√£o: ${config.otimizacao.cache.tempoExpiracao / 3600000}h`);
  
  if (estatisticas.tamanho > estatisticas.tamanhoMaximo * 0.8) {
    console.log("‚ö†Ô∏è  Cache pr√≥ximo do limite!");
  }
  
  console.log("\nüí° BENEF√çCIOS:");
  console.log("‚Ä¢ Reduz chamadas √† API");
  console.log("‚Ä¢ Respostas mais r√°pidas");
  console.log("‚Ä¢ Economia de tokens");
  console.log("‚Ä¢ Melhor experi√™ncia do usu√°rio");
}

// Fun√ß√£o para mostrar configura√ß√µes de otimiza√ß√£o
function mostrarOtimizacoes() {
  console.log("‚ö° CONFIGURA√á√ïES DE OTIMIZA√á√ÉO\n");
  
  console.log("üì¶ CACHE:");
  console.log(`   Ativo: ${config.otimizacao.cache.ativo ? 'Sim' : 'N√£o'}`);
  console.log(`   Tamanho m√°ximo: ${config.otimizacao.cache.tamanhoMaximo}`);
  console.log(`   Tempo expira√ß√£o: ${config.otimizacao.cache.tempoExpiracao / 3600000}h`);
  
  console.log("\n‚úÇÔ∏è  OTIMIZA√á√ÉO DE MENSAGENS:");
  console.log(`   M√°ximo caracteres: ${config.otimizacao.mensagens.maxCaracteres}`);
  console.log(`   M√°ximo tokens: ${config.otimizacao.mensagens.maxTokens}`);
  console.log(`   Truncar inteligente: ${config.otimizacao.mensagens.truncarInteligente ? 'Sim' : 'N√£o'}`);
  console.log(`   Remover palavras comuns: ${config.otimizacao.mensagens.removerPalavrasComuns ? 'Sim' : 'N√£o'}`);
  
  console.log("\nüìù AGRUPAMENTO DE MENSAGENS:");
  console.log(`   Ativo: ${config.otimizacao.agrupamento.ativo ? 'Sim' : 'N√£o'}`);
  console.log(`   Tempo agrupamento: ${config.otimizacao.agrupamento.tempoAgrupamento / 1000}s`);
  console.log(`   M√°ximo por grupo: ${config.otimizacao.agrupamento.maxMensagensPorGrupo}`);
  console.log(`   Confirma√ß√£o r√°pida: ${config.otimizacao.agrupamento.confirmacaoRapida ? 'Sim' : 'N√£o'}`);
}

// Fun√ß√£o para testar otimiza√ß√£o de mensagens
function testarOtimizacao() {
  console.log("üß™ TESTE DE OTIMIZA√á√ÉO DE MENSAGENS\n");
  
  const mensagensTeste = [
    "Oi, tudo bem? Como voc√™s est√£o?",
    "Ol√°! Bom dia! Por favor, me ajudem com uma d√∫vida sobre os produtos de voc√™s. Estou muito interessado em saber mais detalhes sobre como funciona o sistema e quais s√£o os benef√≠cios que posso ter ao adquirir. Obrigado!",
    "Quero comprar agora mesmo! Qual o pre√ßo? Tem desconto? Como fa√ßo para pagar?",
    "Oi, tudo bem? Como voc√™s est√£o?",
    "Ol√°! Bom dia! Por favor, me ajudem com uma d√∫vida sobre os produtos de voc√™s. Estou muito interessado em saber mais detalhes sobre como funciona o sistema e quais s√£o os benef√≠cios que posso ter ao adquirir. Obrigado!"
  ];
  
  for (const mensagem of mensagensTeste) {
    console.log(`üìù Mensagem original (${mensagem.length} chars, ${Math.ceil(mensagem.length/4)} tokens):`);
    console.log(`   "${mensagem}"`);
    
    const otimizada = messageOptimizer.otimizarMensagem(mensagem, 'classificacao');
    console.log(`\n‚úÇÔ∏è  Mensagem otimizada (${otimizada.length} chars, ${Math.ceil(otimizada.length/4)} tokens):`);
    console.log(`   "${otimizada}"`);
    
    const economia = Math.ceil(mensagem.length/4) - Math.ceil(otimizada.length/4);
    const percentual = ((economia / Math.ceil(mensagem.length/4)) * 100).toFixed(1);
    
    console.log(`\nüí∞ Economia: ${economia} tokens (${percentual}%)`);
    console.log("‚îÄ".repeat(80));
  }
}

// Fun√ß√£o para mostrar estat√≠sticas de agrupamento
function mostrarAgrupamento() {
  console.log("üìù ESTAT√çSTICAS DE AGRUPAMENTO\n");
  
  const grupos = messageGrouper.grupos;
  const numGrupos = grupos.size;
  
  console.log(`üìä Grupos ativos: ${numGrupos}`);
  console.log(`‚è∞ Tempo agrupamento: ${config.otimizacao.agrupamento.tempoAgrupamento / 1000}s`);
  console.log(`üì¶ M√°ximo por grupo: ${config.otimizacao.agrupamento.maxMensagensPorGrupo}`);
  
  if (numGrupos > 0) {
    console.log("\nüìã Grupos ativos:");
    for (const [telefone, grupo] of grupos.entries()) {
      const tempoDecorrido = Math.floor((Date.now() - grupo.ultimaAtualizacao) / 1000);
      console.log(`   ${telefone}: ${grupo.mensagens.length} mensagens (${tempoDecorrido}s atr√°s)`);
    }
  }
  
  console.log("\nüí° BENEF√çCIOS:");
  console.log("‚Ä¢ Reduz chamadas √† API");
  console.log("‚Ä¢ Processa m√∫ltiplas mensagens juntas");
  console.log("‚Ä¢ Melhor contexto para IA");
  console.log("‚Ä¢ Economia de tokens");
}

// Fun√ß√£o para limpar cache
function limparCache() {
  try {
    cacheManager.cache.clear();
    cacheManager.salvarCache();
    console.log("‚úÖ Cache limpo com sucesso!");
  } catch (error) {
    console.error("‚ùå Erro ao limpar cache:", error.message);
  }
}

// Fun√ß√£o para mostrar economia estimada
function mostrarEconomia() {
  console.log("üí∞ ECONOMIA ESTIMADA DE TOKENS\n");
  
  const estatisticas = cacheManager.getEstatisticas();
  const taxaCache = parseFloat(estatisticas.taxaUso);
  
  // Estimativas baseadas em uso t√≠pico
  const estimativas = {
    mensagensPorDia: 100,
    tokensPorMensagem: 50,
    taxaOtimizacao: 0.3, // 30% de redu√ß√£o por otimiza√ß√£o
    taxaAgrupamento: 0.2 // 20% de redu√ß√£o por agrupamento
  };
  
  const tokensSemOtimizacao = estimativas.mensagensPorDia * estimativas.tokensPorMensagem * 2; // Classifica√ß√£o + Resposta
  const tokensComCache = tokensSemOtimizacao * (1 - taxaCache / 100);
  const tokensComOtimizacao = tokensComCache * (1 - estimativas.taxaOtimizacao);
  const tokensComAgrupamento = tokensComOtimizacao * (1 - estimativas.taxaAgrupamento);
  
  console.log("üìä Estimativas di√°rias:");
  console.log(`   Sem otimiza√ß√£o: ${tokensSemOtimizacao} tokens`);
  console.log(`   Com cache (${taxaCache}%): ${tokensComCache} tokens`);
  console.log(`   Com otimiza√ß√£o: ${tokensComOtimizacao} tokens`);
  console.log(`   Com agrupamento: ${tokensComAgrupamento} tokens`);
  
  const economiaTotal = tokensSemOtimizacao - tokensComAgrupamento;
  const percentualEconomia = ((economiaTotal / tokensSemOtimizacao) * 100).toFixed(1);
  
  console.log(`\nüí∞ Economia total: ${economiaTotal} tokens (${percentualEconomia}%)`);
  console.log(`üìà Economia mensal estimada: ${economiaTotal * 30} tokens`);
  
  console.log("\nüéØ Compara√ß√£o com limites:");
  console.log(`   Limite TPD: ${config.api.groq.rateLimits.TPD} tokens`);
  console.log(`   Uso otimizado: ${tokensComAgrupamento} tokens`);
  console.log(`   Margem de seguran√ßa: ${((config.api.groq.rateLimits.TPD - tokensComAgrupamento) / config.api.groq.rateLimits.TPD * 100).toFixed(1)}%`);
}

// Verificar argumentos da linha de comando
const comando = process.argv[2];

switch (comando) {
  case 'cache':
    mostrarCache();
    break;
  case 'otimizacoes':
    mostrarOtimizacoes();
    break;
  case 'teste':
    testarOtimizacao();
    break;
  case 'agrupamento':
    mostrarAgrupamento();
    break;
  case 'limpar':
    limparCache();
    break;
  case 'economia':
    mostrarEconomia();
    break;
  default:
    console.log("‚ö° MONITOR DE OTIMIZA√á√ÉO - Comandos dispon√≠veis:");
    console.log("‚Ä¢ node monitor-otimizacao.js cache       - Estat√≠sticas do cache");
    console.log("‚Ä¢ node monitor-otimizacao.js otimizacoes - Configura√ß√µes de otimiza√ß√£o");
    console.log("‚Ä¢ node monitor-otimizacao.js teste       - Testar otimiza√ß√£o de mensagens");
    console.log("‚Ä¢ node monitor-otimizacao.js agrupamento - Estat√≠sticas de agrupamento");
    console.log("‚Ä¢ node monitor-otimizacao.js limpar      - Limpar cache");
    console.log("‚Ä¢ node monitor-otimizacao.js economia    - Economia estimada de tokens");
    break;
} 