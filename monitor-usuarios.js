const UserController = require('./user-controller');
const config = require('./config');

// Instanciar controlador
const userController = new UserController();

// Fun√ß√£o para mostrar estat√≠sticas gerais
function mostrarEstatisticas() {
  console.log("üë• ESTAT√çSTICAS DE USU√ÅRIOS\n");
  
  const estatisticas = userController.getEstatisticas();
  
  console.log("üìä CONTADORES:");
  console.log(`   Total de usu√°rios: ${estatisticas.totalContadores}`);
  console.log(`   Ativos (24h): ${estatisticas.contadoresAtivos}`);
  console.log(`   Limite por usu√°rio: ${estatisticas.maxRespostas} respostas`);
  
  console.log("\nüö´ BLOQUEIOS:");
  console.log(`   Total bloqueados: ${estatisticas.totalBloqueios}`);
  console.log(`   Ativos: ${estatisticas.bloqueiosAtivos}`);
  console.log(`   Tempo de bloqueio: ${estatisticas.tempoBloqueio}`);
  
  console.log("\n‚öôÔ∏è  CONFIGURA√á√ïES:");
  console.log(`   Controle ativo: ${config.controleUsuarios.numeroRespostas.ativo ? 'Sim' : 'N√£o'}`);
  console.log(`   Bloqueio ativo: ${config.controleUsuarios.bloqueioTransferencia.ativo ? 'Sim' : 'N√£o'}`);
  console.log(`   Reset di√°rio: ${config.controleUsuarios.numeroRespostas.resetDiario ? 'Sim' : 'N√£o'}`);
}

// Fun√ß√£o para listar usu√°rios com contadores altos
function listarContadoresAltos() {
  console.log("‚ö†Ô∏è  USU√ÅRIOS COM CONTADORES ALTOS\n");
  
  const usuarios = userController.getUsuariosComContadorAlto();
  
  if (usuarios.length === 0) {
    console.log("‚úÖ Nenhum usu√°rio com contador alto encontrado.");
    return;
  }
  
  console.log(`üìã ${usuarios.length} usu√°rio(s) pr√≥ximo(s) do limite:\n`);
  
  usuarios.forEach((usuario, index) => {
    const percentual = ((usuario.contador / usuario.maxRespostas) * 100).toFixed(1);
    console.log(`${index + 1}. üì± ${usuario.telefone}`);
    console.log(`   Contador: ${usuario.contador}/${usuario.maxRespostas} (${percentual}%)`);
    console.log(`   √öltima resposta: ${usuario.ultimaResposta}`);
    console.log("");
  });
}

// Fun√ß√£o para listar usu√°rios bloqueados
function listarBloqueados() {
  console.log("üö´ USU√ÅRIOS BLOQUEADOS\n");
  
  const usuarios = userController.getUsuariosBloqueados();
  
  if (usuarios.length === 0) {
    console.log("‚úÖ Nenhum usu√°rio bloqueado encontrado.");
    return;
  }
  
  console.log(`üìã ${usuarios.length} usu√°rio(s) bloqueado(s):\n`);
  
  usuarios.forEach((usuario, index) => {
    console.log(`${index + 1}. üì± ${usuario.telefone}`);
    console.log(`   Motivo: ${usuario.motivo}`);
    console.log(`   Bloqueado em: ${usuario.bloqueadoEm}`);
    console.log(`   Expira em: ${usuario.expiraEm}`);
    console.log(`   Tempo restante: ${usuario.tempoRestante}`);
    console.log("");
  });
}

// Fun√ß√£o para desbloquear usu√°rio
function desbloquearUsuario(telefone) {
  if (!telefone) {
    console.log("‚ùå Telefone n√£o fornecido. Use: node monitor-usuarios.js desbloquear <telefone>");
    return;
  }
  
  const sucesso = userController.desbloquearUsuario(telefone);
  
  if (sucesso) {
    console.log(`‚úÖ Usu√°rio ${telefone} desbloqueado com sucesso!`);
  } else {
    console.log(`‚ùå Usu√°rio ${telefone} n√£o estava bloqueado.`);
  }
}

// Fun√ß√£o para resetar contador
function resetarContador(telefone) {
  if (!telefone) {
    console.log("‚ùå Telefone n√£o fornecido. Use: node monitor-usuarios.js resetar <telefone>");
    return;
  }
  
  const sucesso = userController.resetarContador(telefone);
  
  if (sucesso) {
    console.log(`‚úÖ Contador do usu√°rio ${telefone} resetado com sucesso!`);
  } else {
    console.log(`‚ùå Usu√°rio ${telefone} n√£o tinha contador ativo.`);
  }
}

// Fun√ß√£o para mostrar detalhes de um usu√°rio
function mostrarDetalhesUsuario(telefone) {
  if (!telefone) {
    console.log("‚ùå Telefone n√£o fornecido. Use: node monitor-usuarios.js detalhes <telefone>");
    return;
  }
  
  console.log(`üì± DETALHES DO USU√ÅRIO: ${telefone}\n`);
  
  // Verificar contador
  const contador = userController.getContadorRespostas(telefone);
  const maxRespostas = config.controleUsuarios.numeroRespostas.maxRespostas;
  const percentual = ((contador / maxRespostas) * 100).toFixed(1);
  
  console.log("üìä CONTADOR:");
  console.log(`   Respostas: ${contador}/${maxRespostas} (${percentual}%)`);
  
  // Verificar bloqueio
  const isBloqueado = userController.isBloqueado(telefone);
  console.log(`\nüö´ STATUS: ${isBloqueado ? 'BLOQUEADO' : 'LIBERADO'}`);
  
  if (isBloqueado) {
    const tempoRestante = userController.getTempoRestanteBloqueio(telefone);
    const minutosRestantes = Math.ceil(tempoRestante / 60000);
    console.log(`   Tempo restante: ${minutosRestantes} minutos`);
  }
  
  // Verificar se pode receber resposta
  const verificacao = userController.podeReceberResposta(telefone);
  console.log(`\n‚úÖ PODE RECEBER RESPOSTA: ${verificacao.pode ? 'SIM' : 'N√ÉO'}`);
  
  if (!verificacao.pode) {
    console.log(`   Motivo: ${verificacao.motivo}`);
  }
}

// Fun√ß√£o para simular bloqueio
function simularBloqueio(telefone) {
  if (!telefone) {
    console.log("‚ùå Telefone n√£o fornecido. Use: node monitor-usuarios.js simular <telefone>");
    return;
  }
  
  console.log(`üß™ SIMULANDO BLOQUEIO: ${telefone}\n`);
  
  // Simular bloqueio
  userController.bloquearUsuario(telefone, 'teste');
  
  console.log("‚úÖ Usu√°rio bloqueado para teste!");
  console.log("üìã Detalhes do bloqueio:");
  
  const isBloqueado = userController.isBloqueado(telefone);
  const tempoRestante = userController.getTempoRestanteBloqueio(telefone);
  const minutosRestantes = Math.ceil(tempoRestante / 60000);
  
  console.log(`   Status: ${isBloqueado ? 'BLOQUEADO' : 'LIBERADO'}`);
  console.log(`   Tempo restante: ${minutosRestantes} minutos`);
  
  // Mostrar mensagem de bloqueio
  const mensagem = userController.getMensagemBloqueio(telefone);
  console.log(`\nüí¨ Mensagem de bloqueio:`);
  console.log(`   "${mensagem}"`);
}

// Fun√ß√£o para limpar todos os dados
function limparTodosDados() {
  console.log("üóëÔ∏è  LIMPANDO TODOS OS DADOS\n");
  
  console.log("‚ö†Ô∏è  ATEN√á√ÉO: Esta a√ß√£o ir√°:");
  console.log("   ‚Ä¢ Remover todos os contadores de usu√°rios");
  console.log("   ‚Ä¢ Remover todos os bloqueios ativos");
  console.log("   ‚Ä¢ Resetar completamente o sistema");
  console.log("");
  
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  rl.question('Digite "CONFIRMAR" para prosseguir: ', (resposta) => {
    rl.close();
    
    if (resposta === 'CONFIRMAR') {
      // Limpar contadores
      userController.contadores.clear();
      
      // Limpar bloqueios
      userController.bloqueados.clear();
      
      // Salvar dados
      userController.salvarDados();
      
      console.log("‚úÖ Todos os dados foram limpos com sucesso!");
    } else {
      console.log("‚ùå Opera√ß√£o cancelada.");
    }
  });
}

// Verificar argumentos da linha de comando
const comando = process.argv[2];
const parametro = process.argv[3];

switch (comando) {
  case 'estatisticas':
    mostrarEstatisticas();
    break;
  case 'contadores':
    listarContadoresAltos();
    break;
  case 'bloqueados':
    listarBloqueados();
    break;
  case 'desbloquear':
    desbloquearUsuario(parametro);
    break;
  case 'resetar':
    resetarContador(parametro);
    break;
  case 'detalhes':
    mostrarDetalhesUsuario(parametro);
    break;
  case 'simular':
    simularBloqueio(parametro);
    break;
  case 'limpar':
    limparTodosDados();
    break;
  default:
    console.log("üë• MONITOR DE USU√ÅRIOS - Comandos dispon√≠veis:");
    console.log("‚Ä¢ node monitor-usuarios.js estatisticas - Estat√≠sticas gerais");
    console.log("‚Ä¢ node monitor-usuarios.js contadores   - Usu√°rios com contadores altos");
    console.log("‚Ä¢ node monitor-usuarios.js bloqueados   - Usu√°rios bloqueados");
    console.log("‚Ä¢ node monitor-usuarios.js detalhes <telefone> - Detalhes de um usu√°rio");
    console.log("‚Ä¢ node monitor-usuarios.js desbloquear <telefone> - Desbloquear usu√°rio");
    console.log("‚Ä¢ node monitor-usuarios.js resetar <telefone> - Resetar contador");
    console.log("‚Ä¢ node monitor-usuarios.js simular <telefone> - Simular bloqueio");
    console.log("‚Ä¢ node monitor-usuarios.js limpar - Limpar todos os dados");
    break;
} 