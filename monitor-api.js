const ApiController = require('./api-controller');
const config = require('./config');

// Inicializar controlador
const apiController = new ApiController();

// Fun√ß√£o para mostrar status do uso da API
function mostrarStatusAPI() {
  console.log("üìä MONITOR DE USO DA API GROQ (llama3-70b-8192)\n");
  
  const estatisticas = apiController.getEstatisticas();
  
  console.log(`üìÖ Data atual: ${new Date().toLocaleDateString('pt-BR')}`);
  console.log(`‚è∞ Hora atual: ${new Date().toLocaleTimeString('pt-BR')}`);
  
  // Status RPM (Requests por minuto)
  console.log(`\nüîÑ RPM (Requests por minuto):`);
  console.log(`   ${estatisticas.chamadasMinuto}/${config.api.groq.rateLimits.RPM} (${estatisticas.percentualRPM}%)`);
  
  // Status RPD (Requests por dia)
  console.log(`\nüìà RPD (Requests por dia):`);
  console.log(`   ${estatisticas.chamadasHoje}/${config.api.groq.rateLimits.RPD} (${estatisticas.percentualRPD}%)`);
  
  // Status TPM (Tokens por minuto)
  console.log(`\nüß† TPM (Tokens por minuto):`);
  console.log(`   ${estatisticas.tokensMinuto}/${config.api.groq.rateLimits.TPM} (${estatisticas.percentualTPM}%)`);
  
  // Status TPD (Tokens por dia)
  console.log(`\nüìä TPD (Tokens por dia):`);
  console.log(`   ${estatisticas.tokensDia}/${config.api.groq.rateLimits.TPD} (${estatisticas.percentualTPD}%)`);
  
  // Avisos de limite pr√≥ximo
  console.log("\n‚ö†Ô∏è  AVISOS:");
  if (estatisticas.chamadasMinuto >= config.api.groq.rateLimits.RPM * 0.8) {
    console.log("   ‚Ä¢ RPM pr√≥ximo do limite!");
  }
  if (estatisticas.chamadasHoje >= config.api.groq.rateLimits.RPD * 0.8) {
    console.log("   ‚Ä¢ RPD pr√≥ximo do limite!");
  }
  if (estatisticas.tokensMinuto >= config.api.groq.rateLimits.TPM * 0.8) {
    console.log("   ‚Ä¢ TPM pr√≥ximo do limite!");
  }
  if (estatisticas.tokensDia >= config.api.groq.rateLimits.TPD * 0.8) {
    console.log("   ‚Ä¢ TPD pr√≥ximo do limite!");
  }
  
  // Status de limite atingido
  console.log("\nüö´ LIMITES ATINGIDOS:");
  if (estatisticas.chamadasMinuto >= config.api.groq.rateLimits.RPM) {
    console.log("   ‚Ä¢ RPM ATINGIDO - Usando respostas pr√©-definidas");
  }
  if (estatisticas.chamadasHoje >= config.api.groq.rateLimits.RPD) {
    console.log("   ‚Ä¢ RPD ATINGIDO - Usando respostas pr√©-definidas");
  }
  if (estatisticas.tokensMinuto >= config.api.groq.rateLimits.TPM) {
    console.log("   ‚Ä¢ TPM ATINGIDO - Usando respostas pr√©-definidas");
  }
  if (estatisticas.tokensDia >= config.api.groq.rateLimits.TPD) {
    console.log("   ‚Ä¢ TPD ATINGIDO - Usando respostas pr√©-definidas");
  }
  
  if (estatisticas.chamadasMinuto < config.api.groq.rateLimits.RPM && 
      estatisticas.chamadasHoje < config.api.groq.rateLimits.RPD && 
      estatisticas.tokensMinuto < config.api.groq.rateLimits.TPM &&
      estatisticas.tokensDia < config.api.groq.rateLimits.TPD) {
    console.log("   ‚Ä¢ Nenhum limite atingido - Bot funcionando normalmente");
  }
  
  console.log("\nüí° INFORMA√á√ïES:");
  console.log("‚Ä¢ RPM: Reset autom√°tico a cada minuto");
  console.log("‚Ä¢ RPD: Reset autom√°tico a cada dia");
  console.log("‚Ä¢ TPM: Reset autom√°tico a cada minuto");
  console.log("‚Ä¢ TPD: Reset autom√°tico a cada dia");
  console.log("‚Ä¢ Bot usa IA quando h√° cr√©ditos dispon√≠veis");
  console.log("‚Ä¢ Quando limite √© atingido, usa respostas pr√©-definidas");
  console.log("‚Ä¢ Sistema de backoff implementado para evitar erros 429");
  console.log("‚Ä¢ Valores baseados na documenta√ß√£o oficial da Groq");
}

// Fun√ß√£o para resetar contadores
function resetarContadores() {
  apiController.resetarContadores();
  console.log("‚úÖ Contadores resetados com sucesso!");
  console.log("üîÑ Pr√≥xima execu√ß√£o come√ßar√° com contadores zerados");
}

// Fun√ß√£o para mostrar rate limits oficiais
function mostrarRateLimits() {
  console.log("üìã RATE LIMITS OFICIAIS DA GROQ (llama3-70b-8192)\n");
  console.log("| M√©trica | Limite | Descri√ß√£o |");
  console.log("|---------|--------|-----------|");
  console.log(`| RPM | ${config.api.groq.rateLimits.RPM} | Requests por minuto |`);
  console.log(`| RPD | ${config.api.groq.rateLimits.RPD} | Requests por dia |`);
  console.log(`| TPM | ${config.api.groq.rateLimits.TPM} | Tokens por minuto |`);
  console.log(`| TPD | ${config.api.groq.rateLimits.TPD} | Tokens por dia |`);
  
  console.log("\nüîó Fonte: Documenta√ß√£o oficial da Groq");
  console.log("üìñ https://console.groq.com/docs/rate-limits");
}

// Fun√ß√£o para mostrar configura√ß√µes atuais
function mostrarConfiguracoes() {
  console.log("‚öôÔ∏è  CONFIGURA√á√ïES ATUAIS DO BOT\n");
  
  console.log("üè¢ EMPRESA:");
  console.log(`   Nome: ${config.empresa.nome}`);
  console.log(`   Telefone: ${config.empresa.telefone}`);
  console.log(`   Email: ${config.empresa.email}`);
  console.log(`   Hor√°rio: ${config.empresa.horarioAtendimento}`);
  
  console.log("\nü§ñ BOT:");
  console.log(`   Salvar leads: ${config.bot.salvarLeads ? 'Sim' : 'N√£o'}`);
  console.log(`   Notificar transfer√™ncia: ${config.bot.notificarTransferencia ? 'Sim' : 'N√£o'}`);
  console.log(`   Arquivo leads: ${config.bot.arquivoLeads}`);
  console.log(`   Arquivo logs: ${config.bot.arquivoLogs}`);
  
  console.log("\nüß† IA:");
  console.log(`   Modelo: ${config.api.groq.model}`);
  console.log(`   URL: ${config.api.groq.baseUrl}`);
  console.log(`   Timeout: ${config.api.groq.timeout}ms`);
  
  console.log("\nüìä LOGS:");
  console.log(`   N√≠vel: ${config.logs.nivel}`);
  console.log(`   Console: ${config.logs.mostrarConsole ? 'Sim' : 'N√£o'}`);
  console.log(`   Arquivo: ${config.logs.salvarArquivo ? 'Sim' : 'N√£o'}`);
}

// Fun√ß√£o para ajustar limites
function ajustarLimites() {
  console.log("\n‚öôÔ∏è  AJUSTAR LIMITES DA API");
  console.log("Para alterar os limites, edite o arquivo 'config.js':");
  console.log("‚Ä¢ Procure por 'config.api.groq.rateLimits'");
  console.log("‚Ä¢ Altere os valores de 'RPM', 'RPD', 'TPM'");
  console.log("‚Ä¢ Reinicie o bot ap√≥s as altera√ß√µes");
  console.log("\n‚ö†Ô∏è  ATEN√á√ÉO: Os limites atuais seguem a documenta√ß√£o oficial da Groq");
}

// Verificar argumentos da linha de comando
const comando = process.argv[2];

switch (comando) {
  case 'status':
    mostrarStatusAPI();
    break;
  case 'reset':
    resetarContadores();
    break;
  case 'limits':
    mostrarRateLimits();
    break;
  case 'config':
    mostrarConfiguracoes();
    break;
  case 'ajustar':
    ajustarLimites();
    break;
  default:
    console.log("üìä MONITOR DE API GROQ - Comandos dispon√≠veis:");
    console.log("‚Ä¢ node monitor-api.js status   - Mostrar status atual");
    console.log("‚Ä¢ node monitor-api.js reset    - Resetar contadores");
    console.log("‚Ä¢ node monitor-api.js limits   - Mostrar rate limits oficiais");
    console.log("‚Ä¢ node monitor-api.js config   - Mostrar configura√ß√µes atuais");
    console.log("‚Ä¢ node monitor-api.js ajustar  - Como ajustar limites");
    break;
} 